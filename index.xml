<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Kubernetes Security Training</title><link>/</link><description>Recent content on Kubernetes Security Training</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>1.1 Images</title><link>/docs/container-basics/01-basics/01/_images/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/container-basics/01-basics/01/_images/</guid><description>Docker images You can search for images available on Docker Hub by clicking the Explore link or by typing mariadb into the search field: https://hub.docker.com/search/?q=mariadb&amp;type=image You will get a list of results and the first hit will probably be the official image: https://hub.docker.com/_/mariadb This page contains instructions on how to pull the image. Let&amp;rsquo;s pull a certain version of mariadb:
docker pull mariadb:11.5 Note Care about security! Check the images before you run them.</description></item><item><title>1.2 Environment variables</title><link>/docs/container-basics/01-basics/01/_env-vars/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/container-basics/01-basics/01/_env-vars/</guid><description>Environment variables So why was there an error in the previous lab? The MariaDB server is not able to run without a proper configuration. Docker can pass variables into the instantiation process via environment variables. Environment variables are passed via the parameter -e, e.g.:
docker run -it -e MARIADB_ROOT_PASSWORD=my-secret-pw mariadb Once you run the command you will see an output like this:
Initializing database PLEASE REMEMBER TO SET A PASSWORD FOR THE MariaDB root USER !</description></item><item><title>1.3 Dockerfile</title><link>/docs/container-basics/01-basics/01/_dockerfile/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/container-basics/01-basics/01/_dockerfile/</guid><description>Dockerfile Docker can build container images by reading the instructions on how to build the image from a so-called Dockerfile or more generally, Containerfile. The basic docs on how Dockerfiles work can be found at https://docs.docker.com/engine/reference/builder/ .
Write your first Dockerfile Before we extend our php image we are going to have a more general look at how to build a container image. For that, create a new directory with an empty Dockerfile in there.</description></item><item><title>1.4 MultiStage Build</title><link>/docs/container-basics/01-basics/01/_dockerfile_ms/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/container-basics/01-basics/01/_dockerfile_ms/</guid><description>Often you&amp;rsquo;re going to use some kind of libraries, tools or dependencies during the build phase of your application that are not necessary during the runtime of the container. To improve security and efficiency we only include whats absolutely necessary in the image. So we often remove these dependencies in the build phase after the application itself has been built.
In this lab you&amp;rsquo;re going to learn how to use multistage builds and what they are good for.</description></item><item><title>1.5 Under the hood</title><link>/docs/container-basics/01-basics/01/_deepdive/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/container-basics/01-basics/01/_deepdive/</guid><description>A closer look at the docker command and the runtime We&amp;rsquo;ve learned that the term &amp;ldquo;Docker&amp;rdquo; is used somewhat imprecisely. It&amp;rsquo;s employed to refer to various components such as the CLI (Command Line Interface), the Docker Engine, the OCI image format, and the Container runtime. Let&amp;rsquo;s take a closer look at what&amp;rsquo;s happening when we use the command
docker run --rm -d --name sleep-container alpine sleep 900 We will come to the meaning of -rm and the other arguments later on.</description></item><item><title>2.1 SSDLC</title><link>/docs/container-basics/02-security/02/_ssdlc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/container-basics/02-security/02/_ssdlc/</guid><description>Secure Software Development Lifecycle Docker security covers the entire lifecycle of containers, including their runtime, build process, and orchestration. Key security areas include base images, Dockerfiles, container runtimes, and securing the Docker daemon. Additionally, it&amp;rsquo;s important to configure container isolation, manage user privileges effectively, and follow security best practices when orchestrating containers at scale.
To ensure we fully understand and manage our workload, it&amp;rsquo;s crucial to focus on our Software Development Lifecycle (SDLC).</description></item><item><title>Docker/Container Security</title><link>/docs/container/container/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/container/container/</guid><description>Table of Contents Introduction Prerequisites Namespaces PID Namespace Network Namespace Mount Namespace Seccomp AppArmor SELinux Cgroups Additional Security Practices Conclusion Introduction In this lab, you will learn about various security mechanisms available in Docker and containers, including namespaces, seccomp, AppArmor, SELinux, and cgroups. You will also learn how containers communicate with the Linux kernel and how to secure this communication.
Prerequisites A system with Docker installed (preferably a Linux system) Basic knowledge of Docker and Linux commands Namespaces Namespaces are one of the fundamental building blocks of container isolation.</description></item><item><title>2.2 Privileges</title><link>/docs/container-basics/02-security/02/_privileges/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/container-basics/02-security/02/_privileges/</guid><description>Before exploring different options to minimize container privileges, it&amp;rsquo;s important to address a fundamental yet frequently overlooked practice: keeping your software up to date. Regular updates are crucial for protecting against known container escape vulnerabilities, such as Leaky Vessels , which often allow attackers to gain root access to the host. This means both the host system and Docker itself must be consistently updated, including the host kernel and Docker Engine.</description></item></channel></rss>