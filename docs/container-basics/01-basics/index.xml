<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Docker Basics on Container Security Training</title><link>/docs/container-basics/01-basics/</link><description>Recent content in Docker Basics on Container Security Training</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="/docs/container-basics/01-basics/index.xml" rel="self" type="application/rss+xml"/><item><title>Images</title><link>/docs/container-basics/01-basics/01/_images/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/container-basics/01-basics/01/_images/</guid><description>Docker images You can search for images available on Docker Hub by clicking the Explore link or by typing mariadb into the search field: https://hub.docker.com/search/?q=mariadb&amp;type=image You will get a list of results and the first hit will probably be the official image: https://hub.docker.com/_/mariadb This page contains instructions on how to pull the image. Let&amp;rsquo;s pull a certain version of mariadb:
docker pull mariadb:11.5 Security Best Practices When using images from Docker Hub or other sources, always follow these practices:</description></item><item><title>Environment variables</title><link>/docs/container-basics/01-basics/01/_env-vars/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/container-basics/01-basics/01/_env-vars/</guid><description>Why was there an error in the previous lab?
The MariaDB server cannot run without a proper configuration. Docker can pass configuration variables into the setup process via environment variables. Environment variables are passed with the -e parameter, as in:
docker run -it -e MARIADB_ROOT_PASSWORD=my-secret-pw mariadb After running the command, you will see output similar to this:
Initializing database PLEASE REMEMBER TO SET A PASSWORD FOR THE MariaDB root USER! To do so, start the server, then issue the following commands: &amp;#39;/usr/bin/mysqladmin&amp;#39; -u root password &amp;#39;new-password&amp;#39; &amp;#39;/usr/bin/mysqladmin&amp;#39; -u root -h &amp;lt;host&amp;gt; password &amp;#39;new-password&amp;#39; Alternatively, you can run: &amp;#39;/usr/bin/mysql_secure_installation&amp;#39; Notice that we used the arguments -it (interactive terminal).</description></item><item><title>Frontend</title><link>/docs/container-basics/01-basics/01/_frontend/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/container-basics/01-basics/01/_frontend/</guid><description>Frontend Let&amp;rsquo;s create a frontend to demonstrate port-forwarding and container connections. We will run a simple Python web server that displays all users in our MariaDB.
First, get the IP of the currently running MariaDB container. By default, all containers are started in the bridge network, where no DNS service is available, so we can&amp;rsquo;t use container names. As a workaround, we use the IP of the container:
export ip=$(docker inspect mariadb-container-with-external-volume -f &amp;#39;{{ range.</description></item><item><title>Dockerfile</title><link>/docs/container-basics/01-basics/01/_dockerfile/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/container-basics/01-basics/01/_dockerfile/</guid><description>Dockerfile Docker builds container images by reading instructions from a &amp;lsquo;Dockerfile&amp;rsquo; or, more broadly, a &amp;lsquo;Containerfile.&amp;rsquo;&amp;quot; The basic docs on how Dockerfiles work can be found at https://docs.docker.com/engine/reference/builder/ .
Write your first Dockerfile Let us have a general look at how to build a container image. For that, create a new directory with an empty Dockerfile in there.
mkdir myfirstimage cd myfirstimage touch Dockerfile Open Dockerfile in your preferred text editor and add the following instructions:</description></item><item><title>MultiStage Build</title><link>/docs/container-basics/01-basics/01/_dockerfile_ms/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/container-basics/01-basics/01/_dockerfile_ms/</guid><description>Often you&amp;rsquo;re going to use some kind of libraries, tools or dependencies during the build phase of your application that are not necessary during the runtime of the container. To improve security and efficiency we only include whats absolutely necessary in the image. So we often remove these dependencies in the build phase after the application itself has been built.
In this lab you&amp;rsquo;re going to learn how to use multistage builds and what they are good for.</description></item><item><title>Under the hood</title><link>/docs/container-basics/01-basics/01/_deepdive/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/container-basics/01-basics/01/_deepdive/</guid><description>A closer look at the docker command and the runtime We&amp;rsquo;ve learned that the term &amp;ldquo;Docker&amp;rdquo; is used somewhat imprecisely. It refers to various components such as the CLI (Command Line Interface), the Docker Engine, the OCI image format, and the Container runtime. Let&amp;rsquo;s take a closer look at what&amp;rsquo;s happening when we use the command:
docker run --rm -d --name sleep-container alpine sleep 900 We will see the meaning of -rm and the other arguments later.</description></item></channel></rss>