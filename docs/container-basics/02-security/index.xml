<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>2. Securing Containers on Container Security Training</title><link>/docs/container-basics/02-security/</link><description>Recent content in 2. Securing Containers on Container Security Training</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="/docs/container-basics/02-security/index.xml" rel="self" type="application/rss+xml"/><item><title>SSDLC</title><link>/docs/container-basics/02-security/02/_ssdlc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/container-basics/02-security/02/_ssdlc/</guid><description>Secure Software Development Lifecycle Docker security covers the entire lifecycle of containers, including their runtime, build process, and orchestration. Key security areas include base images, Dockerfiles, container runtimes, and securing the Docker daemon. Additionally, it&amp;rsquo;s important to configure container isolation, manage user privileges effectively, and follow security best practices when orchestrating containers at scale.
To ensure we fully understand and manage our workload, it&amp;rsquo;s crucial to focus on our Software Development Lifecycle (SDLC).</description></item><item><title>Docker Trust</title><link>/docs/container-basics/02-security/02/_trust/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/container-basics/02-security/02/_trust/</guid><description>This lab focuses on understanding and securing image distribution. We&amp;rsquo;ll start with a simple docker pull and build up to using Docker Content Trust (DCT).
Let us start with a common pull
docker pull alpine:edge This command will pull the Alpine image tagged as edge. The corresponding image can be found here on Docker Store .
If no tag is specified, Docker will pull the image with the latest tag.</description></item><item><title>Avoid Root</title><link>/docs/container-basics/02-security/02/_root/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/container-basics/02-security/02/_root/</guid><description>Before exploring different options to minimize container privileges, it&amp;rsquo;s important to address a fundamental yet frequently overlooked practice: keeping your software up to date. Regular updates are crucial for protecting against known container escape vulnerabilities, such as Leaky Vessels , which often allow attackers to gain root access to the host. This means both the host system and Docker itself must be consistently updated, including the host kernel and Docker Engine.</description></item><item><title>Capabilities</title><link>/docs/container-basics/02-security/02/_capabilities/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/container-basics/02-security/02/_capabilities/</guid><description>Understanding container capabilities Capabilities in Linux are fine-grained controls that are part of the POSIX permissions system. These capabilities allow you to limit or extend the privileges of a process. Container capabilities are a set of predefined permissions that control what operations a container can perform on the host system. By default, containers run with a wide set of capabilities, but in many cases, they do not require all of them, so giving them only the permissions they need makes them safer to use.</description></item><item><title>Volume security</title><link>/docs/container-basics/02-security/02/_volumes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/container-basics/02-security/02/_volumes/</guid><description>So far we configured user and process permissions of the container. Another important step is to check the filesystem permissions and mount options of a container.
A common method is to run the containers with a read-only filesystem. Let us try to write into a read-only mounted filesystem:
docker run --rm --read-only alpine sh -c &amp;#39;echo &amp;#34;whatever&amp;#34; &amp;gt; /tmp/blub&amp;#39; The command fails with an error:
sh: can&amp;#39;t create /tmp/blub: Read-only file system If you still need to write temporary files, we can do that using the --tmpfs, this will create a temporary in-memory filesystem which is gone as soon at the container is stopped.</description></item><item><title>Linux Security Modules</title><link>/docs/container-basics/02-security/02/_lsm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/container-basics/02-security/02/_lsm/</guid><description>Introduction to Linux Security Modules Linux Security Modules (LSMs) provide mechanisms for implementing various security policies in Linux. They help in enforcing access controls and secure applications by restricting their capabilities and interactions with the system. The most popular LSMs are:
Seccomp (Secure Computing Mode):
Seccomp provides a way to filter system calls that a process can make. Defining a list of allowed or disallowed system calls can minimize the attack surface of applications by reducing the risk of exploitation through system call vulnerabilities.</description></item><item><title>Container Runtime Security</title><link>/docs/container-basics/02-security/02/_runtime_sec/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/container-basics/02-security/02/_runtime_sec/</guid><description>Do the following commands and read the outputs carefully:
whoami head -1 /etc/shadow Now do this:
docker run -v /etc:/host alpine sh -c &amp;#39;whoami;head -1 /host/shadow&amp;#39; Why can you suddenly read stuff that you shouldn&amp;rsquo;t be allowed to? Are containers not restricted? The answer lies in the architecture of Docker:
By default, the Docker Deamon runs in root mode without user namespaces enabled. This means we can mount anything from the host into our container and change it there too using the root user inside our container.</description></item><item><title>Privileged Containers</title><link>/docs/container-basics/02-security/02/_privileged-mode/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/container-basics/02-security/02/_privileged-mode/</guid><description>A note on privileged containers The &amp;ndash;privileged option in Docker is a special flag that gives the container full access to the host system. Itâ€™s much more powerful than simply assigning specific capabilities because it bypasses most of Docker&amp;rsquo;s built-in security restrictions and grants the container elevated permissions, similar to running as root on the host. Often times you will see it in tutorials for running Docker inside Docker or similar things.</description></item><item><title>Recap</title><link>/docs/container-basics/02-security/02/_recap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/container-basics/02-security/02/_recap/</guid><description>We saw how to run containers and how to secure them avoiding root, dropping capabilities, mounting filesystems read-only, and using Linux Security Modules such as seccomp. However it is important to say that because of the architecture of docker, anyone who can start a container has more privileges on the host.
It is still important to secure the Host Operating system and maybe to run a deamonless container technology like podname.</description></item></channel></rss>